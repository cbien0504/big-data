version: '3'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m  
      - xpack.security.enabled=false   
    ports:
      - "9200:9200"  
      - "9300:9300"  
    volumes:
      - ./data:/usr/share/elasticsearch/data 
    networks:
      - my_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601" 
    depends_on:
      - elasticsearch
    networks:
      - my_network


  spark-master:
    image: bde2020/spark-master:3.2.1-hadoop3.2
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - HADOOP_HOME=/opt/hadoop-3.2.1
    volumes:
      - shared_volumes:/opt/hadoop-3.2.1
      - site-packages:/usr/lib/python3.7/site-packages
      - ./define_schema:/define_schema
      - ./test:/test
      - ./es:/es
      - ./kafka-streaming:/kafka-streaming
      - ./spark-streaming:/spark-streaming
      - ./batch-processing:/batch-processing
    networks:
      - my_network
    depends_on:
      - namenode

  spark-worker:
    image: bde2020/spark-worker:3.2.1-hadoop3.2
    container_name: spark-worker
    volumes:
      - shared_volumes:/opt/hadoop-3.2.1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - HADOOP_HOME=/opt/hadoop-3.2.1
    networks:
      - my_network

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - shared_volumes:/opt/hadoop-3.2.1
    env_file:
      - ./hadoop.env
    environment:
      - CLUSTER_NAME=test
      - HDFS_CONF_dfs_replication=1
    networks:
      - my_network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    env_file:
      - ./hadoop.env
    environment:
      SERVICE_PRECONDITION: "namenode:9870"  
    networks:
      - my_network

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   healthcheck:
  #     test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - my_network

  # broker:
  #   image: confluentinc/cp-server:7.4.0
  #   hostname: broker
  #   container_name: broker
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #   ports:
  #     - "9092:9092"
  #     - "9101:9101"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_JMX_PORT: 9101
  #     KAFKA_JMX_HOSTNAME: localhost
  #     KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
  #     CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
  #     CONFLUENT_METRICS_ENABLE: 'false'
  #     CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  #   healthcheck:
  #     test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - my_network

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.4.0
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     broker:
  #       condition: service_healthy
  #   ports:
  #     - "8082:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - my_network

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:7.4.0
  #   hostname: control-center
  #   container_name: control-center
  #   depends_on:
  #     broker:
  #       condition: service_healthy
  #     schema-registry:
  #       condition: service_healthy
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     CONFLIENT_METRICS_ENABLE: 'false'
  #     PORT: 9021
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - my_network

volumes:
  hadoop_namenode:
  hadoop_datanode:
  shared_volumes:
  site-packages:
networks:
  my_network: